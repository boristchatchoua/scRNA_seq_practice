install.packages("BiocManager")
BiocManager::install("celldex")
install.packages("C:/Users/Boris Tchatchoua/Downloads/celldex_1.0.0.tar.gz", repos = NULL, type = "source")
library(celldex)
library(Seurat)
library(dplyr)
library(patchwork)
library(Matrix)
library(celldex)
library(SingleR)
library(Seurat)
library(dplyr)
library(patchwork)
library(Matrix)
library(celldex)
library(SingleR)
ref <- NovershternHematopoieticData()
ref <- NovershternHematopoieticData()
view(ref)
ref
?SingleR
?plotScoreHeatmap()
scbone_mrw <- as.SingleCellExperiment(bone_mrw)
BiocManager::install("SingleCellExperiment")
BiocManager::install("SingleCellExperiment")
#N.B need to install SingleCellExperiment from Bioconductor before converting to a SingeCellExperiment object
scbone_mrw <- as.SingleCellExperiment(bone_mrw)
pred.scbone_mrw <- SingleR(test = scbone_mrw,
ref = ref,
labels = ref$label.main)
plotScoreHeatmap(pred.scbone_mrw,
clusters = bone_mrw$seurat_clusters,
order.by = "clusters",
show_colnames = FALSE)
install.packages("viridis")
#N.B need to install SingleCellExperiment from Bioconductor before converting to a SingeCellExperiment object
scbone_mrw <- as.SingleCellExperiment(bone_mrw)
pred.scbone_mrw <- SingleR(test = scbone_mrw,
ref = ref,
labels = ref$label.main)
plotScoreHeatmap(pred.scbone_mrw,
clusters = bone_mrw$seurat_clusters,
order.by = "clusters",
show_colnames = FALSE)
tools:::.BioC_version_associated_with_R_version()
install.packages("pheatmap")
#N.B need to install SingleCellExperiment from Bioconductor before converting to a SingeCellExperiment object
scbone_mrw <- as.SingleCellExperiment(bone_mrw)
pred.scbone_mrw <- SingleR(test = scbone_mrw,
ref = ref,
labels = ref$label.main)
plotScoreHeatmap(pred.scbone_mrw,
clusters = bone_mrw$seurat_clusters,
order.by = "clusters",
show_colnames = FALSE)
plotScoreHeatmap(pred.scbone_mrw,
clusters = bone_mrw$seurat_clusters,
order.by = "clusters",
show_colnames = FALSE)
plotScoreHeatmap(pred.scbone_mrw,
clusters = bone_mrw$seurat_clusters,
order.by = "clusters",
show_colnames = FALSE)
plotScoreHeatmap(pred.scbone_mrw,
clusters = bone_mrw$seurat_clusters,
order.by = "clusters",
show_colnames = FALSE)
#N.B need to install SingleCellExperiment from Bioconductor before converting to a SingeCellExperiment object
scbone_mrw <- as.SingleCellExperiment(bone_mrw)
pred.scbone_mrw <- SingleR(test = scbone_mrw,
ref = ref,
labels = ref$label.main)
plotScoreHeatmap(pred.scbone_mrw,
clusters = bone_mrw$seurat_clusters,
order.by = "clusters",
show_colnames = FALSE)
plotScoreHeatmap(pred.scbone_mrw,
clusters = bone_mrw$seurat_clusters,
order.by = "clusters",
show_colnames = FALSE)
pred.scbone.fine <- SingleR(test = scbone_mrw,
ref = ref,
labels = ref$label.fine)
plotScoreHeatmap(pred.scbone.fine,
clusters = bone_mrw$seurat_clusters,
order.by = "clusters",
show_colnames = FALSE)
plotScoreHeatmap(pred.scbone.fine,
max.labels = 20,
clusters = bone_mrw$seurat_clusters,
order.by = "clusters",
show_colnames = FALSE)
pred.comb <- combineCommonResults(
list(
"Broad" = pred.scbone_mrw,
"Fine" = pred.scbone.fine
)
)
plotScoreHeatmap(pred.comb,
max.labels = 14,
clusters = pbmc$seurat_clusters,
order.by = "clusters",
show_colnames = FALSE)
plotScoreHeatmap(pred.comb,
max.labels = 14,
clusters = bone_mrw$seurat_clusters,
order.by = "clusters",
show_colnames = FALSE)
View(pred.scbone.fine)
rm(pred.comb,pred.scbone.fine)
# Add the predicted labels and compare to clusters
# You are looking for clusters which have unambiguous labels
bone_mrw$predicted_id <- pred.scbone_mrw$pruned.labels
table(bone_mrw$predicted_id, bone_mrw$seurat_clusters)
?table
?table
VlnPlot(bone_mrw, features= c("LTB","TRAC"))
ident(bone_mrw)
Idents(bone_mrw)
plotScoreHeatmap(pred.scbone_mrw,
clusters = bone_mrw$seurat_clusters,
order.by = "clusters",
show_colnames = FALSE)
# cluster 1
FeaturePlot(bone_mrw, features = c("LTB", "TRAC"))
VlnPlot(bone_mrw, features = c("LTB", "TRAC") )
# cluster 1
FeaturePlot(bone_mrw, features = c("LTB", "TRAC"))
VlnPlot(bone_mrw, features = c("LTB", "TRAC") )
# cluster 1
FeaturePlot(bone_mrw, features = c("LTB", "TRAC"))
VlnPlot(bone_mrw, features = c("LTB", "TRAC") )
bone.data
top10
library(Seurat)
library(dplyr)
library(patchwork)
library(Matrix)
library(celldex)
library(SingleR)
library(Seurat)
library(dplyr)
library(patchwork)
library(Matrix)
library(celldex)
library(SingleR)
# we load our data in to the R environment
bone.data <- load("SRA779509_SRS3805257.sparse.RData")
bone.data # check if the data is stored in sparsed matrix sm or sm2
# we load our data in to the R environment
bone.data <- load("SRA779509_SRS3805257.sparse.RData")
bone.data # check if the data is stored in sparsed matrix sm or sm2
# we load our data in to the R environment
bone.data <- load("SRA779509_SRS3805257.sparse.RData")
bone.data # check if the data is stored in sparsed matrix sm or sm2
# we check the dimensions of the matrix.
# columns = cells
# rows = genes
dim(sm)
tail(rownames(sm))
rownames(sm) <- sub(pattern="_E.*", replacement = "", x = rownames(sm))
tail(rownames(sm))
# create the seurat object with some parameters
# min.cell =  minimum number of cells in which a gene can be detected
# min.features = minimum number of genes that have to be expressed in a cell
bone_mrw <- CreateSeuratObject(counts = sm, project = "Bone_marrow", min.cells = 3, min.features = 200)
bone_mrw
# we use the "PercentageFeatureSet" function to calculate the mitochondrial QC metrics
# We use the set of all genes starting with "MT-" as a set of mitochondrial genes.
# The [[ operator can add columns to object metadata. This is a great place to stash QC stats
bone_mrw[["percent.mt"]] <- PercentageFeatureSet(bone_mrw, pattern = "^MT-")
head(bone_mrw@meta.data)
VlnPlot(bone_mrw, features = c("nFeature_RNA", "nCount_RNA", "percent.mt"), ncol = 3, pt.size = 0)
# FeatureScatter is typically used to visualize feature-feature relationships, but can be used
# for anything calculated by the object, i.e. columns in object metadata, PC scores etc.
plot1 <- FeatureScatter(bone_mrw, feature1 = "nCount_RNA", feature2 = "percent.mt")
plot2 <- FeatureScatter(bone_mrw, feature1 = "nCount_RNA", feature2 = "nFeature_RNA")
plot1 + plot2
bone_mrw <- subset(bone_mrw, subset = nFeature_RNA > 200 & nFeature_RNA < 5000 & percent.mt < 15) %>%
NormalizeData() %>%
FindVariableFeatures()
# Identify the 10 most highly variable genes
top10 <- head(VariableFeatures(bone_mrw), 10)
top10
# plot variable features with and without labels
plot1 <- VariableFeaturePlot(bone_mrw)
plot2 <- LabelPoints(plot = plot1, points = top10, repel = TRUE, xnudge = 0, ynudge = 0)
plot1
plot2
bone_mrw <- ScaleData(bone_mrw) %>%
RunPCA()
VizDimLoadings(bone_mrw, dims = 1:2, reduction = "pca")
# here we can visualize the result of the PCA
DimPlot(bone_mrw, reduction = "pca")
DimPlot(bone_mrw, reduction = "pca", dims = c(3,4))
DimHeatmap(bone_mrw, dims = 1, cells = 500, balanced = TRUE)
DimHeatmap(bone_mrw, dims = 1:9, cells = 500, balanced = TRUE)
ElbowPlot(bone_mrw, ndims = 40)
bone_mrw<- FindNeighbors(bone_mrw, dims=1:25, reduction = "pca") %>%
FindClusters(resolution = 0.5) %>%
RunUMAP(dims = 1:25)
DimPlot(bone_mrw,reduction = "pca") # this labels the PCA plot with clusters. Each cluster gets a unique colour
DimPlot(bone_mrw,reduction = "umap", label = TRUE) # visualise the clusters
#saveRDS(bone_mrw, file = "./bone_marrow.rds")
bone_mrw.markers <- FindAllMarkers(bone_mrw, only.pos = TRUE, min.pct = 0.25, logfc.threshold = 0.25)
bone_mrw.markers %>% group_by(cluster) %>%
top_n(n = 4, wt = avg_log2FC)
# we get the number of cells in each cluster
cell.num <- table(Idents(bone_mrw))
cell.num
# classification is done using NovershternHematopoieticData from celldex
ref <- NovershternHematopoieticData()
#N.B need to install SingleCellExperiment from Bioconductor before converting to a SingeCellExperiment object
scbone_mrw <- as.SingleCellExperiment(bone_mrw)
pred.scbone_mrw <- SingleR(test = scbone_mrw,
ref = ref,
labels = ref$label.main)
plotScoreHeatmap(pred.scbone_mrw,
clusters = bone_mrw$seurat_clusters,
order.by = "clusters",
show_colnames = FALSE)
# Add the predicted labels and compare to clusters
# You are looking for clusters which have unambiguous labels
bone_mrw$predicted_id <- pred.scbone_mrw$pruned.labels
table(bone_mrw$predicted_id, bone_mrw$seurat_clusters)
# cluster 1
FeaturePlot(bone_mrw, features = c("LTB", "TRAC"))
VlnPlot(bone_mrw, features = c("LTB", "TRAC") )
# cluster 1
FeaturePlot(bone_mrw, features = c("HBA1", "HBA2"))
VlnPlot(bone_mrw, features = c("HBA1", "HBA2"))
# cluster 2
FeaturePlot(bone_mrw, features = c("S100A8", "S100A9"))
VlnPlot(bone_mrw, features = c("S100A8", "S100A9"))
# cluster 3
FeaturePlot(bone_mrw, features = c("CA1", "HBM"))
VlnPlot(bone_mrw, features = c("CA1", "HBM"))
# cluster 4
FeaturePlot(bone_mrw, features = c("NKG7", "GNLY"))
VlnPlot(bone_mrw, features = c("NKG7", "GNLY"))
# cluster 5
FeaturePlot(bone_mrw, features = c("CA1", "HBM"))
VlnPlot(bone_mrw, features = c("CA1", "HBM"))
# cluster 6
FeaturePlot(bone_mrw, features = c("EIF5A", "HNRNPH1"))
VlnPlot(bone_mrw, features = c("EIF5A", "HNRNPH1"))
# cluster 7
FeaturePlot(bone_mrw, features = c("TNFRSF13C", "CD74"))
VlnPlot(bone_mrw, features = c("TNFRSF13C", "CD74"))
# cluster 8
FeaturePlot(bone_mrw, features = c("CCL5", "IL32"))
VlnPlot(bone_mrw, features = c("CCL5", "IL32"))
# cluster 9
FeaturePlot(bone_mrw, features = c("PRTN3", "MPO"))
VlnPlot(bone_mrw, features = c("PRTN3", "MPO"))
# cluster 10
FeaturePlot(bone_mrw, features = c("CD79B", "IGHM"))
VlnPlot(bone_mrw, features = c("CD79B", "IGHM"))
# cluster 11
FeaturePlot(bone_mrw, features = c("IGHA2", "IGHG1"))
VlnPlot(bone_mrw, features = c("IGHA2", "IGHG1"))
# cluster 12
FeaturePlot(bone_mrw, features = c("IGLL1", "STMN1"))
VlnPlot(bone_mrw, features = c("IGLL1", "STMN1"))
# cluster 13
FeaturePlot(bone_mrw, features = c("FCGR3A", "LST1"))
VlnPlot(bone_mrw, features = c("FCGR3A", "LST1"))
# cluster 14
FeaturePlot(bone_mrw, features = c("DNTT", "VPREB3"))
VlnPlot(bone_mrw, features = c("DNTT", "VPREB3"))
# cluster 15
FeaturePlot(bone_mrw, features = c("IRF8", "JCHAIN"))
VlnPlot(bone_mrw, features = c("IRF8", "JCHAIN"))
# Select final IDs
new_ids <- c(
"0" = "CD4 + T Cells",
"1" = "Erythroid cells",
"2" = "Monocytes",
"3" = "Erythroid cells",
"4" = "NK Cells",
"5" = "Erythroid cells",
"6" = "Erythroid cells",
"7" = "B Cells",
"8" = "CD8+ T cells",
"9" = "Unknow",
"10" = "B Cells",
"11" = "Unknown",
"12" = "B Cells",
"13" = "Monocytes",
"14" = "B Cells",
"15" = "Dendritic cells"
)
bone_mrw <- RenameIdents(bone_mrw, new_ids)
bone_mrw$cell_type <- Idents(bone_mrw)
DimPlot(bone_mrw)
DimPlot(bone_mrw, label.size = 5, label = TRUE) + NoLegend()
sig_markers <- bone_mrw.markers %>%
filter(p_val_adj < .05)
## Part 2a: Pathway enrichment online in enrichr: https://maayanlab.cloud/Enrichr/ ##
write.csv(sig_markers, file = "bone_mrw_sig_markers.csv")
# Select final IDs
new_ids <- c(
"0" = "CD4 + T Cells",
"1" = "Erythroid cells",
"2" = "Monocytes",
"3" = "Erythroid cells",
"4" = "NK Cells",
"5" = "Erythroid cells",
"6" = "Erythroid cells",
"7" = "B Cells",
"8" = "CD8+ T cells",
"9" = "Unknown",
"10" = "B Cells",
"11" = "Unknown",
"12" = "B Cells",
"13" = "Monocytes",
"14" = "B Cells",
"15" = "Dendritic cells"
)
bone_mrw <- RenameIdents(bone_mrw, new_ids)
library(Seurat)
library(dplyr)
library(patchwork)
library(Matrix)
library(celldex)
library(SingleR)
library(Seurat)
library(dplyr)
library(patchwork)
library(Matrix)
library(celldex)
library(SingleR)
# we load our data in to the R environment
bone.data <- load("SRA779509_SRS3805257.sparse.RData")
bone.data # check if the data is stored in sparsed matrix sm or sm2
# we check the dimensions of the matrix.
# columns = cells
# rows = genes
dim(sm)
tail(rownames(sm))
rownames(sm) <- sub(pattern="_E.*", replacement = "", x = rownames(sm))
tail(rownames(sm))
# create the seurat object with some parameters
# min.cell =  minimum number of cells in which a gene can be detected
# min.features = minimum number of genes that have to be expressed in a cell
bone_mrw <- CreateSeuratObject(counts = sm, project = "Bone_marrow", min.cells = 3, min.features = 200)
bone_mrw
# we use the "PercentageFeatureSet" function to calculate the mitochondrial QC metrics
# We use the set of all genes starting with "MT-" as a set of mitochondrial genes.
# The [[ operator can add columns to object metadata. This is a great place to stash QC stats
bone_mrw[["percent.mt"]] <- PercentageFeatureSet(bone_mrw, pattern = "^MT-")
head(bone_mrw@meta.data)
VlnPlot(bone_mrw, features = c("nFeature_RNA", "nCount_RNA", "percent.mt"), ncol = 3, pt.size = 0)
# FeatureScatter is typically used to visualize feature-feature relationships, but can be used
# for anything calculated by the object, i.e. columns in object metadata, PC scores etc.
plot1 <- FeatureScatter(bone_mrw, feature1 = "nCount_RNA", feature2 = "percent.mt")
plot2 <- FeatureScatter(bone_mrw, feature1 = "nCount_RNA", feature2 = "nFeature_RNA")
plot1 + plot2
library(Seurat)
library(dplyr)
library(patchwork)
library(Matrix)
library(celldex)
library(SingleR)
# we load our data in to the R environment
bone.data <- load("SRA779509_SRS3805257.sparse.RData")
bone.data # check if the data is stored in sparsed matrix sm or sm2
# we check the dimensions of the matrix.
# columns = cells
# rows = genes
dim(sm)
tail(rownames(sm))
rownames(sm) <- sub(pattern="_E.*", replacement = "", x = rownames(sm))
tail(rownames(sm))
# create the seurat object with some parameters
# min.cell =  minimum number of cells in which a gene can be detected
# min.features = minimum number of genes that have to be expressed in a cell
bone_mrw <- CreateSeuratObject(counts = sm, project = "Bone_marrow", min.cells = 3, min.features = 200)
bone_mrw
# we use the "PercentageFeatureSet" function to calculate the mitochondrial QC metrics
# We use the set of all genes starting with "MT-" as a set of mitochondrial genes.
# The [[ operator can add columns to object metadata. This is a great place to stash QC stats
bone_mrw[["percent.mt"]] <- PercentageFeatureSet(bone_mrw, pattern = "^MT-")
head(bone_mrw@meta.data)
VlnPlot(bone_mrw, features = c("nFeature_RNA", "nCount_RNA", "percent.mt"), ncol = 3, pt.size = 0)
# FeatureScatter is typically used to visualize feature-feature relationships, but can be used
# for anything calculated by the object, i.e. columns in object metadata, PC scores etc.
plot1 <- FeatureScatter(bone_mrw, feature1 = "nCount_RNA", feature2 = "percent.mt")
plot2 <- FeatureScatter(bone_mrw, feature1 = "nCount_RNA", feature2 = "nFeature_RNA")
plot1 + plot2
bone_mrw <- subset(bone_mrw, subset = nFeature_RNA > 200 & nFeature_RNA < 5000 & percent.mt < 15) %>%
NormalizeData() %>%
FindVariableFeatures()
# Identify the 10 most highly variable genes
top10 <- head(VariableFeatures(bone_mrw), 10)
top10
# plot variable features with and without labels
plot1 <- VariableFeaturePlot(bone_mrw)
plot2 <- LabelPoints(plot = plot1, points = top10, repel = TRUE, xnudge = 0, ynudge = 0)
plot1
plot2
bone_mrw <- ScaleData(bone_mrw) %>%
RunPCA()
VizDimLoadings(bone_mrw, dims = 1:2, reduction = "pca")
# here we can visualize the result of the PCA
DimPlot(bone_mrw, reduction = "pca")
DimPlot(bone_mrw, reduction = "pca", dims = c(3,4))
DimHeatmap(bone_mrw, dims = 1, cells = 500, balanced = TRUE)
DimHeatmap(bone_mrw, dims = 1:9, cells = 500, balanced = TRUE)
ElbowPlot(bone_mrw, ndims = 40)
bone_mrw<- FindNeighbors(bone_mrw, dims=1:25, reduction = "pca") %>%
FindClusters(resolution = 0.5) %>%
RunUMAP(dims = 1:25)
DimPlot(bone_mrw,reduction = "pca") # this labels the PCA plot with clusters. Each cluster gets a unique colour
DimPlot(bone_mrw,reduction = "umap", label = TRUE) # visualise the clusters
#saveRDS(bone_mrw, file = "./bone_marrow.rds")
bone_mrw.markers <- FindAllMarkers(bone_mrw, only.pos = TRUE, min.pct = 0.25, logfc.threshold = 0.25)
bone_mrw.markers %>% group_by(cluster) %>%
top_n(n = 4, wt = avg_log2FC)
# we get the number of cells in each cluster
cell.num <- table(Idents(bone_mrw))
cell.num
# classification is done using NovershternHematopoieticData from celldex
ref <- NovershternHematopoieticData()
#N.B need to install SingleCellExperiment from Bioconductor before converting to a SingeCellExperiment object
scbone_mrw <- as.SingleCellExperiment(bone_mrw)
pred.scbone_mrw <- SingleR(test = scbone_mrw,
ref = ref,
labels = ref$label.main)
plotScoreHeatmap(pred.scbone_mrw,
clusters = bone_mrw$seurat_clusters,
order.by = "clusters",
show_colnames = FALSE)
# Add the predicted labels and compare to clusters
# You are looking for clusters which have unambiguous labels
bone_mrw$predicted_id <- pred.scbone_mrw$pruned.labels
table(bone_mrw$predicted_id, bone_mrw$seurat_clusters)
# cluster 1
FeaturePlot(bone_mrw, features = c("LTB", "TRAC"))
VlnPlot(bone_mrw, features = c("LTB", "TRAC") )
# cluster 1
FeaturePlot(bone_mrw, features = c("HBA1", "HBA2"))
VlnPlot(bone_mrw, features = c("HBA1", "HBA2"))
# cluster 2
FeaturePlot(bone_mrw, features = c("S100A8", "S100A9"))
VlnPlot(bone_mrw, features = c("S100A8", "S100A9"))
# cluster 3
FeaturePlot(bone_mrw, features = c("CA1", "HBM"))
VlnPlot(bone_mrw, features = c("CA1", "HBM"))
# cluster 4
FeaturePlot(bone_mrw, features = c("NKG7", "GNLY"))
VlnPlot(bone_mrw, features = c("NKG7", "GNLY"))
# cluster 5
FeaturePlot(bone_mrw, features = c("CA1", "HBM"))
VlnPlot(bone_mrw, features = c("CA1", "HBM"))
# cluster 6
FeaturePlot(bone_mrw, features = c("EIF5A", "HNRNPH1"))
VlnPlot(bone_mrw, features = c("EIF5A", "HNRNPH1"))
# cluster 7
FeaturePlot(bone_mrw, features = c("TNFRSF13C", "CD74"))
VlnPlot(bone_mrw, features = c("TNFRSF13C", "CD74"))
# cluster 8
FeaturePlot(bone_mrw, features = c("CCL5", "IL32"))
VlnPlot(bone_mrw, features = c("CCL5", "IL32"))
# cluster 9
FeaturePlot(bone_mrw, features = c("PRTN3", "MPO"))
VlnPlot(bone_mrw, features = c("PRTN3", "MPO"))
# cluster 10
FeaturePlot(bone_mrw, features = c("CD79B", "IGHM"))
VlnPlot(bone_mrw, features = c("CD79B", "IGHM"))
# cluster 11
FeaturePlot(bone_mrw, features = c("IGHA2", "IGHG1"))
VlnPlot(bone_mrw, features = c("IGHA2", "IGHG1"))
# cluster 12
FeaturePlot(bone_mrw, features = c("IGLL1", "STMN1"))
VlnPlot(bone_mrw, features = c("IGLL1", "STMN1"))
# cluster 13
FeaturePlot(bone_mrw, features = c("FCGR3A", "LST1"))
VlnPlot(bone_mrw, features = c("FCGR3A", "LST1"))
# cluster 14
FeaturePlot(bone_mrw, features = c("DNTT", "VPREB3"))
VlnPlot(bone_mrw, features = c("DNTT", "VPREB3"))
# cluster 15
FeaturePlot(bone_mrw, features = c("IRF8", "JCHAIN"))
VlnPlot(bone_mrw, features = c("IRF8", "JCHAIN"))
# Select final IDs
new_ids <- c(
"0" = "CD4 + T Cells",
"1" = "Erythroid cells",
"2" = "Monocytes",
"3" = "Erythroid cells",
"4" = "NK Cells",
"5" = "Erythroid cells",
"6" = "Erythroid cells",
"7" = "B Cells",
"8" = "CD8+ T cells",
"9" = "Unknown",
"10" = "B Cells",
"11" = "Unknown",
"12" = "B Cells",
"13" = "Monocytes",
"14" = "B Cells",
"15" = "Dendritic cells"
)
bone_mrw <- RenameIdents(bone_mrw, new_ids)
bone_mrw$cell_type <- Idents(bone_mrw)
DimPlot(bone_mrw)
DimPlot(bone_mrw, label.size = 5, label = TRUE) + NoLegend()
sig_markers <- bone_mrw.markers %>%
filter(p_val_adj < .05)
## Part 2a: Pathway enrichment online in enrichr: https://maayanlab.cloud/Enrichr/ ##
write.csv(sig_markers, file = "bone_mrw_sig_markers.csv")
